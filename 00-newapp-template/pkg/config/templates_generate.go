// Code generated by vfsgen; DO NOT EDIT.

// +build release

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// TemplateFolder statically implements the virtual filesystem provided to vfsgen.
var TemplateFolder = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 1, 12, 13, 57, 38, 500477838, time.UTC),
		},
		"/client": &vfsgen۰DirInfo{
			name:    "client",
			modTime: time.Date(2019, 1, 8, 4, 14, 1, 121961497, time.UTC),
		},
		"/client/text": &vfsgen۰DirInfo{
			name:    "text",
			modTime: time.Date(2019, 1, 8, 4, 46, 51, 644563666, time.UTC),
		},
		"/client/text/table.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "table.tmpl",
			modTime:          time.Date(2019, 1, 8, 4, 46, 51, 644563666, time.UTC),
			uncompressedSize: 3130,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x96\x5f\x6f\xda\x30\x10\xc0\xdf\xf9\x14\x27\x0f\xfa\x47\x25\x71\xd9\xd6\x97\x4a\x3c\x4c\x42\x9a\x78\xd9\x53\x1f\x91\xae\x59\x71\x42\xd6\x36\x89\x12\x8b\x69\xb2\xf3\xdd\xa7\xb3\x43\xa1\xc5\x0e\x21\x50\x07\x39\xc1\xf7\xc7\x67\x72\xbf\x3b\x38\x87\x95\x94\xc5\x3d\xe7\x45\x24\xf3\xf2\xcf\x73\xf8\x94\xbf\xf2\x2a\x8f\xe5\xdf\xa8\x14\x5c\x46\x51\xc2\xbf\x14\xd3\x65\x5a\x15\x2f\xd1\xbf\x8b\x78\x3a\x5f\x97\xa9\xbc\x90\xd3\x24\x2f\x56\xa2\x1c\xdd\xfe\x18\x28\xb5\x14\x71\x9a\x09\x60\x3f\xcd\xda\x43\xf4\xfb\x45\xb0\xba\x1e\xdc\xf4\x1a\x27\x98\x81\x63\xe0\xde\x8a\xcb\x0c\x91\x14\x11\x69\xa2\x2f\x1a\x34\x3d\x9b\x15\xb3\xe0\x34\xe3\x80\x8f\xa0\x39\x20\x2c\x34\x5c\xbe\xcd\x60\x56\xe0\x12\x51\xbb\xcc\x34\x5c\xa1\x36\xf3\xb5\xd9\xc7\xcc\xe6\x02\x44\x4e\x37\xf7\x6e\x0b\xc4\x31\xe8\x05\x22\x72\x0d\x21\xcd\xe4\x06\xcd\x0a\x3d\x7a\xcc\x34\x19\xd8\x93\x6f\xb4\x3a\xfd\x24\x1d\xc6\x07\xb3\xa0\xc7\xb8\x19\x28\x05\x45\x99\x66\x32\x06\xa6\x61\x14\x7c\xaf\xf4\x28\x98\xdc\xd2\xfc\xed\xae\xd2\xc0\x80\xcd\x67\x0c\xd8\xaf\xe8\x55\x30\x60\x33\x51\x3d\x95\x69\x21\xd3\x3c\x63\x40\x39\xd6\x77\xd3\x32\xca\x12\x01\xc3\xe7\x31\x0c\xd7\x70\x3f\x85\x10\x82\xba\x1e\xd0\xa9\xda\x03\x5a\x64\x0c\xc2\xf9\x0c\x42\x0a\x08\xc2\x9d\x78\x28\x1c\xa5\x02\x10\xd9\xd2\xf8\xea\x1d\x9a\xc8\x96\x75\x3d\xd8\xe1\xea\x61\x95\x66\x49\x4f\xac\x7a\xa9\x5b\x6c\xd0\x09\x90\x4b\xdd\xe4\xa1\x41\xe6\x0a\xaf\x1b\x5e\x2c\x52\x1e\x75\x42\xc3\x02\xb3\x45\xe6\x11\x5c\xb8\x6c\xbd\xbf\xbb\x2c\x42\x4e\x75\x02\xa5\x41\x03\xb7\x88\x8c\xbd\xea\xfb\x63\x83\x4c\x47\xf5\x33\xe0\xe0\xc2\x00\x6c\xda\xc1\x28\xf8\x7a\x57\xe9\x16\x0e\x8e\xcd\xb5\xdd\xf4\x4f\x28\xff\x93\x03\x00\x80\x7e\x17\xca\xa7\x20\xe0\x4c\xfc\xa6\xa1\x50\xfa\x57\x27\xb6\x15\xff\xf8\x1c\x87\xae\x04\xf9\x88\x92\x17\x32\x8f\xc3\x43\x5d\xca\x8f\xa1\xdb\x61\x87\xfe\xe5\x03\xd5\xe9\xf0\x70\x67\xf3\xa3\xec\x8e\xf0\x70\xcf\xf3\xc2\xee\x76\xd8\xa5\x1b\x7a\xca\x41\xd7\xb7\xdc\x79\xec\x39\x3c\x06\xe2\x6e\x44\x79\x3b\x99\xa5\xb9\xa9\x32\x13\x23\x98\xb4\x16\x99\x46\x62\x58\x0c\xcf\xd9\x8c\xdb\x0f\xe0\xab\x53\x5b\x89\x24\x89\x34\x12\x5b\x28\x1a\xf9\x91\x47\xa7\xa2\x36\x5c\x27\x54\xd7\xe8\x66\x4a\x1b\x3d\xec\x56\xb7\xe1\x5a\x5a\xb9\xdc\xc8\x65\x5b\xf5\x53\x2a\x8d\x21\xcb\xe5\x26\xb0\xba\x56\xea\xfc\x41\x31\xd6\x7c\xc8\xbd\xad\xa0\x27\xff\x0b\x69\x7f\x27\x76\x93\xff\x01\x00\x00\xff\xff\x7d\xd8\xe2\xa8\x3a\x0c\x00\x00"),
		},
		"/cmd": &vfsgen۰DirInfo{
			name:    "cmd",
			modTime: time.Date(2018, 12, 23, 21, 6, 24, 800610086, time.UTC),
		},
		"/cmd/client.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "client.tmpl",
			modTime:          time.Date(2018, 12, 23, 20, 34, 40, 860286587, time.UTC),
			uncompressedSize: 1649,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x94\xc1\x4e\xdb\x40\x10\x86\xef\x7e\x8a\x91\xa9\x94\x20\xd9\x46\xd0\x1b\x92\x0f\x25\x50\x8a\x54\x08\x6a\x82\x38\x20\x0e\x6b\xef\xd8\xde\x6a\xbd\x9b\x7a\xc7\x88\x28\xf2\xbb\x57\x1e\x3b\x21\x05\x3b\x12\xbd\xa0\xc5\x33\xf9\xe6\x9f\xdd\xf9\x67\xb3\x91\x98\x29\x83\xe0\xcf\xb4\x42\x43\x0f\x4e\xe4\xe8\x43\xd3\x78\x33\x5b\x96\xc2\xc8\x73\x0f\x00\x20\xb7\xab\x02\xab\x54\x2b\x48\x39\x0d\x9e\x16\x0f\x17\xb3\xf9\xed\xed\xb7\xbb\xcb\x67\x78\x9a\xdf\x2f\x6f\xe6\x77\x8b\x67\xef\x5d\xf2\x48\x56\x9b\x34\x5d\x16\x08\x12\x33\x51\x6b\x82\xb4\xab\x05\x93\x8e\x3e\x81\x54\x18\x48\x10\x6c\xa9\x88\x50\x46\xc7\x9e\xb7\xa8\x93\x3e\xcb\x75\x92\xb4\x72\xc4\x87\x7a\x25\x05\x21\x1f\x25\x6a\x24\xf4\xbc\xf9\x8a\x94\x35\x7d\x22\x84\x65\x00\x10\xb6\x7f\xc3\xb0\xb4\x12\xf9\xa3\xa3\x4a\x99\x9c\x8f\xb0\x40\x02\xb2\x40\x22\xd1\x18\xa4\xee\x25\xf8\xed\xac\x09\x5e\x4b\x0d\x4f\xbd\xc2\x73\x8e\x3d\xf7\xbc\x9c\x79\x79\xcb\xeb\x7a\x1d\xe2\x15\x08\xd7\x1c\xbc\xb9\x84\xa9\x65\x41\x42\x47\xc7\x3d\x82\x18\x41\x2d\x82\x8a\xfe\x87\x43\x88\x65\x1b\x1c\x22\x30\x25\xcc\x0d\x8b\x30\xa2\xc4\x21\x42\x27\x00\x38\xfc\x22\x74\x8d\x90\xd9\x0a\x84\x94\xca\xe4\x41\x77\x71\x7c\x72\x28\xaa\xb4\xad\xf4\x0f\x5b\x32\x5b\xa2\x4b\x0f\xb0\xdb\x70\xa5\x58\xdc\x67\xe0\xc4\xc2\x69\x4c\x38\xb7\xfd\x9f\xba\x89\x75\xd3\x98\xee\x0e\xfd\x59\xd9\x61\xca\x0f\x96\x8a\xb4\xc0\x5d\x2d\xa0\xaa\xc6\x93\x4c\x68\x87\x00\xbf\xf0\x4f\x8d\x8e\xa0\x4d\x69\x2b\xd8\x8c\x1f\x30\xb1\x72\x0d\xd3\x1f\xcb\xe5\x3d\x5c\x5f\x2d\x1d\x58\xa3\xd7\x7b\x4f\x08\x61\x9a\xb5\x72\xd3\xcc\x6a\xd9\x0e\xd2\xbe\xdc\x19\x57\xeb\x23\x7c\x19\xd3\xed\x3c\xc2\x24\x3a\x89\x58\xcd\xc9\xe4\xd8\xf3\xae\x5e\x45\xb9\xd2\xe8\xce\x37\x1b\xc2\x72\xa5\x05\xed\x1c\xfd\x53\x39\xf2\x9b\x06\x3e\x46\x1e\xd8\x38\xc3\xb1\x4b\x76\x92\xdf\x34\xde\x66\x83\x46\x36\x8d\xe7\xbd\x5f\x15\x0c\x6e\x37\x45\x27\xf6\xe8\x08\x86\x2c\xad\xdc\x9b\xab\xfb\xff\xb7\xa3\x0c\x09\x66\xb6\x42\x70\x6f\xd6\x8e\x7a\xd8\x97\x8f\x1b\x87\xfd\x3e\x10\xde\xed\x81\x8f\x9f\x77\xfe\x8c\x4f\x83\xb3\xf1\x1c\x36\x60\x3c\x9e\x90\x9f\x42\x48\x67\xc1\xd7\x03\x55\x4c\xdc\x7d\x3b\xe5\xa1\x8e\x33\x44\x1a\xbf\xb8\xfe\xde\xdf\xae\x6e\x9f\xd8\x6d\xb3\x3d\xe5\x5b\x7f\xc7\xfe\x85\x4d\x92\x35\x2c\x4a\x45\x85\xbf\x75\x66\xec\x7f\xaf\xab\x6a\x1d\xf9\x87\x50\x7d\x83\x3b\xc3\xf9\xb7\xd6\xe0\x1a\x1e\x85\xd6\x48\xfe\xd6\x2c\xb1\xff\x58\x60\x85\x3c\xb5\x25\x27\x28\x17\xf9\xe3\x6d\xf4\x23\x32\xdc\x46\xb7\x89\xf7\xda\xd8\x72\xfe\x06\x00\x00\xff\xff\xde\x95\x9f\xf9\x71\x06\x00\x00"),
		},
		"/cmd/gophercli.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "gophercli.tmpl",
			modTime:          time.Date(2018, 12, 23, 20, 58, 7, 786942517, time.UTC),
			uncompressedSize: 1261,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x51\x6f\xda\x30\x10\x7e\xcf\xaf\xb8\xf1\xc2\x8a\x62\xd2\xad\xdb\x4b\xa5\x49\x74\xac\x9b\x90\x4a\xa9\x04\xed\x4b\xa0\x56\x20\x47\xb0\xe6\xc4\xa9\x7d\x49\x87\x20\xfc\xf6\x29\x0e\x24\xb4\x63\x6a\x2f\x0f\xf1\x7d\xf7\x7d\x9f\xcf\xf6\x6d\x36\x21\x2e\x45\x82\xd0\xfa\xa5\xd2\x15\xea\xfe\xcd\xe0\xde\x04\x11\xb6\x8a\xc2\x81\x17\xe1\x72\xc6\xd8\xae\x0c\xc6\x18\xeb\xf2\xba\xcc\x5d\x97\xbb\x9d\x47\xce\x39\xdf\x03\x65\xb4\xdb\x9d\xa8\x33\x6d\x75\xdc\x9a\xe7\x01\xe7\x1e\x78\x6d\x9b\x3c\x76\x4b\xc0\xc6\x14\x1e\x7b\x4f\x00\xb0\xac\x99\x3e\x40\x6f\x09\x5b\xe8\x9d\x9d\x95\xe9\x16\xea\xb5\x04\x38\x07\xee\xd5\xcc\x69\xbb\x34\x99\xee\xec\xe6\xe5\x06\x30\xb5\xbb\x5b\xeb\x69\x4d\xdb\x1e\x9d\x83\x4b\xce\x25\x3f\x02\x06\x35\xad\x68\x40\xdf\xda\xf0\xd9\x49\xde\x31\x0a\x5b\xfb\x1d\x03\xa7\x79\xb0\x83\x1d\x9c\xe6\xbd\x90\xbf\x8e\x03\xcd\xef\xad\x88\x52\x73\xe9\x79\x91\x30\xd4\x8d\x04\xad\xb2\x79\x77\xa1\x62\x6f\x8e\x72\xae\x62\x8c\xd5\xcc\x71\xaa\x57\x1c\x4c\x3e\x40\x66\xd0\xc0\x55\x7f\x78\xfd\x71\x32\x3c\x83\xab\xbb\x01\x90\x02\x8d\xb9\xc0\x67\x08\x92\x10\x62\x15\x8a\xe5\x1a\x2a\x81\xb1\x10\xad\x50\x68\x98\xac\x44\x12\x99\xae\xe3\xfc\x14\x96\xa6\x11\x44\xb2\x54\x3a\x0e\x48\xa8\x04\x02\xba\xb4\x1d\x35\xdd\xd4\x8d\x3c\xaf\x50\xa3\x30\xbf\x33\x4d\x5e\x64\x7d\x05\x79\xe7\xe7\x2c\xc1\xe7\x20\x4d\x19\x61\x9c\xca\x80\xd0\x73\x1c\x3b\x63\x95\x4f\x45\x5c\x48\x01\x7e\x7f\x34\x1c\x5e\xdd\xfe\x98\x81\x3f\xbe\xff\xde\x24\xa3\xbb\xc9\x60\x74\x3b\x2e\x4f\x27\xd5\x3c\x90\x30\x4a\xcb\x4e\x4c\xa5\x7f\x40\x3d\x57\x46\xd0\xfa\x72\x7f\x51\x8c\x19\x21\x31\x21\x17\x80\x19\x8b\x8c\x91\x40\xaa\x28\x12\x49\xe4\xa9\x8c\xd2\x8c\x40\x62\x8e\x12\x7c\xfb\xfb\x34\xab\x95\x4f\x99\xc0\x52\x08\xec\xe9\x3d\xca\xcf\x8d\xb2\xbc\x22\xb7\x5a\xe6\xef\x50\x5e\xb0\x10\x97\x41\x26\xa9\x71\x08\x71\x9e\x45\x6e\xe5\x90\xbf\xed\xf0\xa5\x51\x92\x0e\x16\x78\x50\xe6\x6f\x2a\xbf\x36\x4a\x9b\x7f\xbb\xa8\x87\x6d\x8c\x64\xca\x31\x80\xbd\x2c\x3f\x5c\xee\xde\x20\xc9\x62\xd4\x62\x11\x48\xb9\x06\xbf\x3e\x81\x73\xfd\x27\x88\x53\x89\xfb\x17\xd9\x6c\xe0\xf0\xd4\xd0\xea\x4b\x81\x09\xdd\x08\x43\xad\xa2\x38\x55\xba\x4f\xc3\x80\xb0\x05\xaf\xab\x63\xd4\x39\xea\x31\x05\x9a\xfe\x5f\x54\xe9\xbf\xb5\x07\xd4\x46\xa8\x64\xff\x2b\xeb\xce\x66\x83\x49\x58\x14\x7f\x03\x00\x00\xff\xff\x9b\x7b\x60\x67\xed\x04\x00\x00"),
		},
		"/cmd/server.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "server.tmpl",
			modTime:          time.Date(2018, 12, 22, 14, 59, 53, 259735282, time.UTC),
			uncompressedSize: 476,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\x4f\x4b\xc3\x40\x10\xc5\xef\xf9\x14\x8f\xe2\xd1\xf4\xdf\xb1\xd0\x83\x56\x0f\x1e\xda\x08\xb1\xa7\xd2\x43\x9a\x4c\xd3\x40\x76\x67\xd9\x9d\x8a\xb0\xe4\xbb\x4b\x36\x71\x11\xab\x5e\x42\x76\xe6\xbd\x99\xf7\x1b\xef\x2b\x3a\x37\x9a\x30\xc9\xc9\xbe\x93\xdd\xbb\xa2\xa6\x09\xba\x2e\x01\x80\x0d\x2b\x55\xe8\x6a\x15\x1e\x40\xcd\xe6\x42\xb6\x6c\x1b\xb8\x20\xc6\x21\xdf\x3f\x6e\xb2\xed\xf6\x61\xf7\x74\xc4\x21\x7b\x7d\x7b\xc9\x76\xf9\x31\x09\xf2\xfc\x7a\x2a\x07\xbb\xfb\xf2\x3b\x29\xac\xc4\x7f\x36\x83\x30\x33\xd2\xb0\x8e\xa2\x34\x35\xf7\xfd\x87\xad\x40\x5f\xd5\x89\x6c\x98\x46\x02\xb9\x10\x42\x59\x18\x6d\xe3\x84\x34\x58\x4f\x87\x21\xcf\x1f\x85\x32\x2d\xb9\x15\xbc\x87\x90\x32\x6d\x21\x11\x2a\xef\xf7\xf6\x50\xbf\x37\xd9\x04\x60\xef\x49\x57\x5d\x97\x24\x3f\x6f\x12\xed\x63\xc2\xbb\xdb\x43\x7c\x27\xfb\xab\x3d\x42\xad\x17\xf3\xe5\x62\xbe\x44\x9a\x56\x5c\x5a\x66\x59\x4f\x67\x25\xeb\x73\x53\xcf\xc6\x42\x4c\x72\x1b\x64\x8c\xfa\xcf\x22\x36\xd1\xfe\x19\x00\x00\xff\xff\x70\xac\xa9\x14\xdc\x01\x00\x00"),
		},
		"/cmd/version.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "version.tmpl",
			modTime:          time.Date(2018, 12, 23, 21, 6, 24, 796610039, time.UTC),
			uncompressedSize: 435,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\x5f\x4b\xc3\x30\x14\xc5\xdf\xfb\x29\x0e\xc5\x07\x05\xf7\x05\x0a\x3e\x4d\x91\x81\x58\xc1\x3f\x2f\xe2\x43\x68\xef\xd6\x40\x9a\x84\xdc\xdb\xa9\x84\x7e\x77\x69\xd2\x3a\x65\x83\x41\x48\x08\xe7\xdc\x1f\xe7\x9e\x18\x5b\xda\x6a\x4b\x28\xdf\x28\xb0\x76\xf6\x95\xd5\x8e\x4a\x8c\x63\x01\x00\x6b\xd7\xf7\xca\xb6\x55\xfa\x00\x3b\xe7\x3b\x0a\x8d\xd1\xd8\x67\x37\xde\xeb\xa7\x97\x4d\xfd\xf8\xfc\x51\x24\x4b\x8c\x42\xbd\x37\x4a\x08\xe5\x7d\x32\xaf\x1f\x36\x07\xe4\x29\xe6\x4c\xca\x5a\xed\x45\x3b\xcb\x8b\xb6\x5a\x71\x73\x3d\xdd\x9d\xfb\x6c\x8c\x26\x2b\x37\x12\x06\x02\x70\xab\xd9\x1b\xf5\x0d\xe9\x08\x59\xf9\x8d\x34\x9d\x41\xfc\x20\xb8\x6c\x69\xab\x06\x23\xd5\x34\x74\x75\x60\xf2\xc2\x64\x0a\x7b\x0a\xa7\x98\x59\x39\xcf\x4c\xd0\xbb\x2f\xd5\x7b\x43\x5c\xfd\xdb\x7f\x2e\x74\x7e\xca\x71\x2c\x62\x24\xdb\x4e\x35\x1c\xb5\xfe\xc7\x94\x53\x5e\x1c\x77\xbd\x8c\xff\x04\x00\x00\xff\xff\x06\x16\xdf\x23\xb3\x01\x00\x00"),
		},
		"/server": &vfsgen۰DirInfo{
			name:    "server",
			modTime: time.Date(2019, 1, 7, 23, 18, 1, 233030457, time.UTC),
		},
		"/server/html": &vfsgen۰DirInfo{
			name:    "html",
			modTime: time.Date(2019, 1, 7, 23, 18, 1, 233030457, time.UTC),
		},
		"/vfsgen_templates.go": &vfsgen۰CompressedFileInfo{
			name:             "vfsgen_templates.go",
			modTime:          time.Date(2019, 1, 12, 13, 57, 38, 496477794, time.UTC),
			uncompressedSize: 1301,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x4d\x8b\xdb\x30\x10\x86\xcf\xd6\xaf\x98\xfa\x12\x07\x52\xe9\x1e\xd8\x4b\xf7\x8b\x85\xb2\x5b\x4a\xda\x1e\x17\x45\x1e\xcb\x6a\xe4\x91\x91\xe4\x0d\xa1\xec\x7f\x2f\x63\x3b\xd9\xae\x29\x94\xe6\x94\xcc\x68\x3e\x9e\x77\xde\x28\x05\x3f\x9c\xf7\x60\x91\x30\xea\x8c\xa0\x61\x95\xb1\xeb\xbd\xce\x98\x9e\xcf\x51\x69\xc3\x0a\x8e\x2e\xb7\xa0\xbd\x87\xd0\x40\x6e\x11\x1a\xe7\x31\xc1\x40\x35\x46\xc8\xad\x4b\xd0\x04\x5f\x63\x14\x4a\xc1\x8e\x7f\xba\x04\x84\x06\x53\xd2\xf1\x04\x7b\x34\x7a\x48\xdc\x7e\xef\x88\x03\x7d\x0c\x36\xea\x0e\x8c\x26\xd8\x23\xc4\x81\xa0\x89\xa1\x03\x4d\xa7\x63\x8b\x11\x21\xd0\xdb\x94\x53\xca\xc8\xa9\x9a\x9b\x77\xfa\x04\x14\x32\xb4\xfa\x85\xfb\x45\xf4\x3a\xbb\x17\x9c\xc7\xc3\x4a\x2a\x13\xa8\x71\x56\x9d\x39\xd4\x4a\x02\x7c\x4b\x8e\x2c\xbc\x34\xc9\x22\xc1\x11\xc1\x44\x9c\x70\x53\xd6\xd9\x19\xb0\x61\x1c\xc5\x03\x46\x50\x13\x28\x23\xe5\x74\xa6\xbd\x88\x02\xd8\xed\xb1\xae\xb1\x96\x70\xe1\xac\x03\xe1\x54\xb6\x1f\x9c\xaf\x21\x6b\x9b\xa4\xe8\xb5\x39\x68\x8b\xd0\x69\x47\x42\x28\x65\xc3\xf6\x22\xb3\x0d\x23\xf2\xb4\xcf\xf3\xa5\xb9\xb4\x41\x08\xd7\xf5\x21\x66\xa8\x44\x51\x5a\x97\xdb\x61\x2f\x4d\xe8\x54\x6a\x87\x68\x42\xf8\xac\xa6\x9a\x72\x91\x75\x71\xe8\x13\x92\xf2\xc1\xc6\x21\x71\x96\x30\xab\x36\xe7\x9e\xbf\x87\x31\x92\x72\x74\x64\x53\x29\xd6\x42\x34\x03\x99\x71\xb3\x6a\x0d\xbf\x84\x28\x94\x82\xc7\xa7\xdd\xed\x16\x1e\x1a\x96\xe7\x72\x0f\x66\x7f\xb8\xb9\x9d\xaf\x0f\xd1\xd9\x36\x7f\x34\xde\x99\x03\x84\x21\x82\x39\xd6\xd5\x9a\x25\x70\x94\x5c\x8d\xac\xd6\x42\xfd\x24\x0a\x73\xac\x37\xf0\x0c\xdb\x2b\x08\x49\xde\x63\xe6\x1a\x21\x0a\xd6\x9b\x74\x87\x9c\x28\xff\x6a\xba\x52\x14\xe7\xf8\xdd\x74\x5d\x7e\xba\x3c\x6f\xc9\xad\x48\xfb\xbb\x3f\xfb\xf5\x07\xbb\xf4\xc1\xa2\xf5\xc8\x7c\xdd\xa2\x39\x80\x63\xe6\x55\x1c\xb1\x89\x7d\x32\xd3\x30\xfc\xa2\xc9\x6c\xb3\x0d\xbb\x11\x74\xfd\x73\x48\xf9\xcd\x82\xbd\xce\x6d\x92\xa2\x70\x0d\xcc\x5a\xcb\xeb\x40\x59\x3b\x4a\xd5\x28\xc2\x72\xf7\x92\xc5\x2f\x96\x90\x57\x50\x4a\xa6\x5a\x60\x71\x58\x2a\x29\xd5\xbf\xd9\x8a\x57\x21\x0a\x8c\xa3\x5e\x93\x5f\xe4\xfd\x9c\xaf\xd8\x13\xf2\xc6\xc5\xea\xfd\xd4\xf5\xe6\xfc\xf2\xa9\xcf\x2e\x50\xe2\xc5\xce\xb3\xb7\xc0\x9f\xf3\xc1\x36\xa2\x28\xbe\x4c\xe6\x7e\x9c\x92\x33\x57\xc9\x99\x4f\xfc\x17\xd8\x69\x9b\xc6\xa2\x32\xa2\x47\x9d\x70\x4c\x7d\xd7\xd1\xe9\xbd\x9f\xab\xca\xdd\xbb\x05\xf8\xc5\x2b\xfb\xc2\x35\xc0\xab\x7f\xb8\x02\x72\x7e\xd4\x67\x32\xb5\xbc\xd3\x59\x7b\x4f\x15\xc6\xb8\x7e\x43\x1c\x5d\xf5\x75\x5c\xac\xba\x6c\x08\xef\xa4\xfb\xaf\xae\xaf\xe2\x77\x00\x00\x00\xff\xff\x52\xde\xf5\x27\x15\x05\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/client"].(os.FileInfo),
		fs["/cmd"].(os.FileInfo),
		fs["/server"].(os.FileInfo),
		fs["/vfsgen_templates.go"].(os.FileInfo),
	}
	fs["/client"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/client/text"].(os.FileInfo),
	}
	fs["/client/text"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/client/text/table.tmpl"].(os.FileInfo),
	}
	fs["/cmd"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/cmd/client.tmpl"].(os.FileInfo),
		fs["/cmd/gophercli.tmpl"].(os.FileInfo),
		fs["/cmd/server.tmpl"].(os.FileInfo),
		fs["/cmd/version.tmpl"].(os.FileInfo),
	}
	fs["/server"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/server/html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
